$version Generated by VerilatedVcd $end
$date Fri Jul 12 12:13:53 2019
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 b clock $end
  $var wire  1 c reset $end
  $var wire  1 d sim_clock $end
  $var wire  1 e sim_wait $end
  $scope module TestAccel $end
   $var wire  1 b clock $end
   $var wire  1 c reset $end
   $var wire  1 d sim_clock $end
   $var wire  1 b sim_shell_clock $end
   $var wire  8 \ sim_shell_host_req_addr [7:0] $end
   $var wire  1 # sim_shell_host_req_deq $end
   $var wire  1 [ sim_shell_host_req_opcode $end
   $var wire  1 Z sim_shell_host_req_valid $end
   $var wire 32 ] sim_shell_host_req_value [31:0] $end
   $var wire 32 % sim_shell_host_resp_bits [31:0] $end
   $var wire  1 $ sim_shell_host_resp_valid $end
   $var wire 64 _ sim_shell_mem_rd_bits [63:0] $end
   $var wire  1 - sim_shell_mem_rd_ready $end
   $var wire  1 ^ sim_shell_mem_rd_valid $end
   $var wire 64 ( sim_shell_mem_req_addr [63:0] $end
   $var wire  1 ' sim_shell_mem_req_opcode $end
   $var wire  1 & sim_shell_mem_req_valid $end
   $var wire 64 + sim_shell_mem_wr_bits [63:0] $end
   $var wire  1 * sim_shell_mem_wr_valid $end
   $var wire  1 c sim_shell_reset $end
   $var wire  1 d sim_shell_sim_clock $end
   $var wire  1 a sim_shell_sim_wait $end
   $var wire  1 e sim_wait $end
   $var wire  1 b vta_accel_clock $end
   $var wire  8 \ vta_accel_io_host_req_addr [7:0] $end
   $var wire  1 # vta_accel_io_host_req_deq $end
   $var wire  1 [ vta_accel_io_host_req_opcode $end
   $var wire  1 Z vta_accel_io_host_req_valid $end
   $var wire 32 ] vta_accel_io_host_req_value [31:0] $end
   $var wire 32 % vta_accel_io_host_resp_bits [31:0] $end
   $var wire  1 $ vta_accel_io_host_resp_valid $end
   $var wire 64 _ vta_accel_io_mem_rd_bits [63:0] $end
   $var wire  1 - vta_accel_io_mem_rd_ready $end
   $var wire  1 ^ vta_accel_io_mem_rd_valid $end
   $var wire 64 ( vta_accel_io_mem_req_addr [63:0] $end
   $var wire  1 ' vta_accel_io_mem_req_opcode $end
   $var wire  1 & vta_accel_io_mem_req_valid $end
   $var wire 64 + vta_accel_io_mem_wr_bits [63:0] $end
   $var wire  1 * vta_accel_io_mem_wr_valid $end
   $var wire  1 c vta_accel_reset $end
   $scope module sim_shell $end
    $var wire  1 b clock $end
    $var wire  8 \ host_req_addr [7:0] $end
    $var wire  1 # host_req_deq $end
    $var wire  1 [ host_req_opcode $end
    $var wire  1 Z host_req_valid $end
    $var wire 32 ] host_req_value [31:0] $end
    $var wire 32 % host_resp_bits [31:0] $end
    $var wire  1 $ host_resp_valid $end
    $var wire 64 _ mem_rd_bits [63:0] $end
    $var wire  1 - mem_rd_ready $end
    $var wire  1 ^ mem_rd_valid $end
    $var wire 64 ( mem_req_addr [63:0] $end
    $var wire  1 ' mem_req_opcode $end
    $var wire  1 & mem_req_valid $end
    $var wire 64 + mem_wr_bits [63:0] $end
    $var wire  1 * mem_wr_valid $end
    $var wire  1 b mod_host_clock $end
    $var wire  8 \ mod_host_dpi_req_addr [7:0] $end
    $var wire  1 # mod_host_dpi_req_deq $end
    $var wire  1 [ mod_host_dpi_req_opcode $end
    $var wire  1 Z mod_host_dpi_req_valid $end
    $var wire 32 ] mod_host_dpi_req_value [31:0] $end
    $var wire 32 % mod_host_dpi_resp_bits [31:0] $end
    $var wire  1 $ mod_host_dpi_resp_valid $end
    $var wire  1 c mod_host_reset $end
    $var wire  1 b mod_mem_clock $end
    $var wire 64 _ mod_mem_dpi_rd_bits [63:0] $end
    $var wire  1 - mod_mem_dpi_rd_ready $end
    $var wire  1 ^ mod_mem_dpi_rd_valid $end
    $var wire 64 ( mod_mem_dpi_req_addr [63:0] $end
    $var wire  8 f mod_mem_dpi_req_len [7:0] $end
    $var wire  1 ' mod_mem_dpi_req_opcode $end
    $var wire  1 & mod_mem_dpi_req_valid $end
    $var wire 64 + mod_mem_dpi_wr_bits [63:0] $end
    $var wire  1 * mod_mem_dpi_wr_valid $end
    $var wire  1 c mod_mem_reset $end
    $var wire  1 d mod_sim_clock $end
    $var wire  1 a mod_sim_dpi_wait $end
    $var wire  1 c mod_sim_reset $end
    $var wire  1 c reset $end
    $var wire  1 d sim_clock $end
    $var wire  1 a sim_wait $end
    $scope module mod_host $end
     $var wire 32 g ADDR_BITS [31:0] $end
     $var wire 32 h DATA_BITS [31:0] $end
     $var wire  1 b clock $end
     $var wire  8 \ dpi_req_addr [7:0] $end
     $var wire  1 # dpi_req_deq $end
     $var wire  1 [ dpi_req_opcode $end
     $var wire  1 Z dpi_req_valid $end
     $var wire 32 ] dpi_req_value [31:0] $end
     $var wire 32 % dpi_resp_bits [31:0] $end
     $var wire  1 $ dpi_resp_valid $end
     $var wire  1 c reset $end
    $upscope $end
    $scope module mod_mem $end
     $var wire 32 i ADDR_BITS [31:0] $end
     $var wire 32 i DATA_BITS [31:0] $end
     $var wire 32 g LEN_BITS [31:0] $end
     $var wire  1 b clock $end
     $var wire 64 _ dpi_rd_bits [63:0] $end
     $var wire  1 - dpi_rd_ready $end
     $var wire  1 ^ dpi_rd_valid $end
     $var wire 64 ( dpi_req_addr [63:0] $end
     $var wire  8 f dpi_req_len [7:0] $end
     $var wire  1 ' dpi_req_opcode $end
     $var wire  1 & dpi_req_valid $end
     $var wire 64 + dpi_wr_bits [63:0] $end
     $var wire  1 * dpi_wr_valid $end
     $var wire  1 c reset $end
    $upscope $end
    $scope module mod_sim $end
     $var wire  1 d clock $end
     $var wire  1 a dpi_wait $end
     $var wire  1 c reset $end
     $var wire  1 a wait_reg $end
    $upscope $end
   $upscope $end
   $scope module vta_accel $end
    $var wire  1 b ce_clock $end
    $var wire 32 1 ce_io_ecnt_0_bits [31:0] $end
    $var wire  1 0 ce_io_ecnt_0_valid $end
    $var wire  1 / ce_io_finish $end
    $var wire  1 . ce_io_launch $end
    $var wire 64 _ ce_io_mem_rd_bits [63:0] $end
    $var wire  1 - ce_io_mem_rd_ready $end
    $var wire  1 ^ ce_io_mem_rd_valid $end
    $var wire 64 ( ce_io_mem_req_addr [63:0] $end
    $var wire  1 ' ce_io_mem_req_opcode $end
    $var wire  1 & ce_io_mem_req_valid $end
    $var wire 64 + ce_io_mem_wr_bits [63:0] $end
    $var wire  1 * ce_io_mem_wr_valid $end
    $var wire 64 6 ce_io_ptrs_0 [63:0] $end
    $var wire 64 8 ce_io_ptrs_1 [63:0] $end
    $var wire 64 : ce_io_ptrs_2 [63:0] $end
    $var wire 32 2 ce_io_vals_0 [31:0] $end
    $var wire 32 3 ce_io_vals_1 [31:0] $end
    $var wire 32 4 ce_io_vals_2 [31:0] $end
    $var wire 32 5 ce_io_vals_3 [31:0] $end
    $var wire  1 c ce_reset $end
    $var wire  1 b clock $end
    $var wire  8 \ io_host_req_addr [7:0] $end
    $var wire  1 # io_host_req_deq $end
    $var wire  1 [ io_host_req_opcode $end
    $var wire  1 Z io_host_req_valid $end
    $var wire 32 ] io_host_req_value [31:0] $end
    $var wire 32 % io_host_resp_bits [31:0] $end
    $var wire  1 $ io_host_resp_valid $end
    $var wire 64 _ io_mem_rd_bits [63:0] $end
    $var wire  1 - io_mem_rd_ready $end
    $var wire  1 ^ io_mem_rd_valid $end
    $var wire 64 ( io_mem_req_addr [63:0] $end
    $var wire  1 ' io_mem_req_opcode $end
    $var wire  1 & io_mem_req_valid $end
    $var wire 64 + io_mem_wr_bits [63:0] $end
    $var wire  1 * io_mem_wr_valid $end
    $var wire  1 c reset $end
    $var wire  1 b rf_clock $end
    $var wire 32 1 rf_io_ecnt_0_bits [31:0] $end
    $var wire  1 0 rf_io_ecnt_0_valid $end
    $var wire  1 / rf_io_finish $end
    $var wire  8 \ rf_io_host_req_addr [7:0] $end
    $var wire  1 # rf_io_host_req_deq $end
    $var wire  1 [ rf_io_host_req_opcode $end
    $var wire  1 Z rf_io_host_req_valid $end
    $var wire 32 ] rf_io_host_req_value [31:0] $end
    $var wire 32 % rf_io_host_resp_bits [31:0] $end
    $var wire  1 $ rf_io_host_resp_valid $end
    $var wire  1 . rf_io_launch $end
    $var wire 64 6 rf_io_ptrs_0 [63:0] $end
    $var wire 64 8 rf_io_ptrs_1 [63:0] $end
    $var wire 64 : rf_io_ptrs_2 [63:0] $end
    $var wire 32 2 rf_io_vals_0 [31:0] $end
    $var wire 32 3 rf_io_vals_1 [31:0] $end
    $var wire 32 4 rf_io_vals_2 [31:0] $end
    $var wire 32 5 rf_io_vals_3 [31:0] $end
    $var wire  1 c rf_reset $end
    $scope module ce $end
     $var wire  1 b clock $end
     $var wire 32 S cnt [31:0] $end
     $var wire 32 1 cycles [31:0] $end
     $var wire 32 k initvar [31:0] $end
     $var wire 32 1 io_ecnt_0_bits [31:0] $end
     $var wire  1 0 io_ecnt_0_valid $end
     $var wire  1 / io_finish $end
     $var wire  1 . io_launch $end
     $var wire 64 _ io_mem_rd_bits [63:0] $end
     $var wire  1 - io_mem_rd_ready $end
     $var wire  1 ^ io_mem_rd_valid $end
     $var wire 64 ( io_mem_req_addr [63:0] $end
     $var wire  1 ' io_mem_req_opcode $end
     $var wire  1 & io_mem_req_valid $end
     $var wire 64 + io_mem_wr_bits [63:0] $end
     $var wire  1 * io_mem_wr_valid $end
     $var wire 64 6 io_ptrs_0 [63:0] $end
     $var wire 64 8 io_ptrs_1 [63:0] $end
     $var wire 64 : io_ptrs_2 [63:0] $end
     $var wire 32 2 io_vals_0 [31:0] $end
     $var wire 32 3 io_vals_1 [31:0] $end
     $var wire 32 4 io_vals_2 [31:0] $end
     $var wire 32 5 io_vals_3 [31:0] $end
     $var wire  1 b overallAccum_clock $end
     $var wire 63 L overallAccum_io_in [62:0] $end
     $var wire  1 / overallAccum_io_ready $end
     $var wire  1 J overallAccum_io_rst $end
     $var wire 64 + overallAccum_io_sum [63:0] $end
     $var wire  1 K overallAccum_io_valid $end
     $var wire  1 c overallAccum_reset $end
     $var wire 64 T raddr1 [63:0] $end
     $var wire 64 V raddr2 [63:0] $end
     $var wire 64 O reg1 [63:0] $end
     $var wire 64 Q reg2 [63:0] $end
     $var wire  1 c reset $end
     $var wire  1 b sliceAccum_clock $end
     $var wire 63 F sliceAccum_io_in [62:0] $end
     $var wire  1 E sliceAccum_io_ready $end
     $var wire  1 D sliceAccum_io_rst $end
     $var wire 64 H sliceAccum_io_sum [63:0] $end
     $var wire  1 ' sliceAccum_io_valid $end
     $var wire  1 c sliceAccum_reset $end
     $var wire  3 N state [2:0] $end
     $var wire 64 X waddr [63:0] $end
     $scope module overallAccum $end
      $var wire  1 b clock $end
      $var wire 32 m initvar [31:0] $end
      $var wire 63 L io_in [62:0] $end
      $var wire  1 / io_ready $end
      $var wire  1 J io_rst $end
      $var wire 64 + io_sum [63:0] $end
      $var wire  1 K io_valid $end
      $var wire  1 / ready $end
      $var wire 64 + reg$ [63:0] $end
      $var wire  1 c reset $end
     $upscope $end
     $scope module sliceAccum $end
      $var wire  1 b clock $end
      $var wire 32 l initvar [31:0] $end
      $var wire 63 F io_in [62:0] $end
      $var wire  1 E io_ready $end
      $var wire  1 D io_rst $end
      $var wire 64 H io_sum [63:0] $end
      $var wire  1 ' io_valid $end
      $var wire  1 E ready $end
      $var wire 64 H reg$ [63:0] $end
      $var wire  1 c reset $end
     $upscope $end
    $upscope $end
    $scope module rf $end
     $var wire  1 b clock $end
     $var wire 32 j initvar [31:0] $end
     $var wire 32 1 io_ecnt_0_bits [31:0] $end
     $var wire  1 0 io_ecnt_0_valid $end
     $var wire  1 / io_finish $end
     $var wire  8 \ io_host_req_addr [7:0] $end
     $var wire  1 # io_host_req_deq $end
     $var wire  1 [ io_host_req_opcode $end
     $var wire  1 Z io_host_req_valid $end
     $var wire 32 ] io_host_req_value [31:0] $end
     $var wire 32 % io_host_resp_bits [31:0] $end
     $var wire  1 $ io_host_resp_valid $end
     $var wire  1 . io_launch $end
     $var wire 64 6 io_ptrs_0 [63:0] $end
     $var wire 64 8 io_ptrs_1 [63:0] $end
     $var wire 64 : io_ptrs_2 [63:0] $end
     $var wire 32 2 io_vals_0 [31:0] $end
     $var wire 32 3 io_vals_1 [31:0] $end
     $var wire 32 4 io_vals_2 [31:0] $end
     $var wire 32 5 io_vals_3 [31:0] $end
     $var wire 32 % rdata [31:0] $end
     $var wire 32 < reg_0 [31:0] $end
     $var wire 32 = reg_1 [31:0] $end
     $var wire 32 B reg_10 [31:0] $end
     $var wire 32 C reg_11 [31:0] $end
     $var wire 32 2 reg_2 [31:0] $end
     $var wire 32 3 reg_3 [31:0] $end
     $var wire 32 4 reg_4 [31:0] $end
     $var wire 32 5 reg_5 [31:0] $end
     $var wire 32 > reg_6 [31:0] $end
     $var wire 32 ? reg_7 [31:0] $end
     $var wire 32 @ reg_8 [31:0] $end
     $var wire 32 A reg_9 [31:0] $end
     $var wire  1 c reset $end
     $var wire  1 $ state $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b01101010111110111011100010011101 %
0&
0'
b1011011110010101001011011100011101111100001000111111111011110011 (
0*
b0011101110000010101001000010011111100001100001111010001110111111 +
1-
0.
1/
00
b11111111010001100110011001100010 1
b11101001011110000111111100001011 2
b10010001111110111000001010111100 3
b10111011000110001100000010011000 4
b00110101011110110011100110101110 5
b1100110111000001101011001101111110100001111000001110100000100010 6
b1011110000000001011100111101010001000000110101101010000010000001 8
b1101111101010111010000001110011100011101111000101101010100001010 :
b10100110010110011010001001101010 <
b01100110000111101000111001001001 =
b10100001111000001110100000100010 >
b11001101110000011010110011011111 ?
b01000000110101101010000010000001 @
b10111100000000010111001111010100 A
b00011101111000101101010100001010 B
b11011111010101110100000011100111 C
0D
1E
b100101011100110001000011100001000100101000110100010101100111110 F
b1111101111010100000111010100010011111111100001100111011011010111 H
0J
0K
b010000011101010001001111111110000110011101101101011100000000000 L
b010 N
b1000010010100011000000001000111001101101101100111000100101001110 O
b0011001000111100000000010011010000000111101100100010111001001001 Q
b11000001110011010010110101011101 S
b0111111001101000011110101010110001100000101000000111101110011100 T
b1110100000111011100100011100000000000011001110101111000011000001 V
b1011011110010101001011011100011101111100001000111111111011110011 X
0Z
0[
b00000000 \
b00000000000000000000000000000000 ]
0^
b0000000000000000000000000000000000000000000000000000000000000000 _
0a
0b
1c
0d
0e
b00000000 f
b00000000000000000000000000001000 g
b00000000000000000000000000100000 h
b00000000000000000000000001000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
#1
b00000000000000000000000000000000 %
b0000000000000000000000000000000000000000000000000000000000000000 +
0-
0/
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b0000000000000000000000000000000000000000000000000000000000000000 6
b0000000000000000000000000000000000000000000000000000000000000000 8
b0000000000000000000000000000000000000000000000000000000000000000 :
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
0E
b0000000000000000000000000000000000000000000000000000000000000000 H
b000000000000000000000000000000000000000000000000000000000000000 L
b000 N
1b
#2
0b
#3
b0000000000000000000000000000000000000000000000000000000000000000 (
b00000000000000000000000000000000 S
b0000000000000000000000000000000000000000000000000000000000000000 T
b0000000000000000000000000000000000000000000000000000000000000000 V
b0000000000000000000000000000000000000000000000000000000000000000 X
1b
#4
0b
#5
1b
#6
0b
#7
1b
#8
0b
#9
1b
#10
0b
#11
1b
#12
0b
#13
1b
#14
0b
#15
1b
#16
0b
#17
1b
#18
0b
#19
1b
#20
0b
0c
#21
1a
1b
1d
1e
#22
0a
0b
0d
0e
#23
1#
1Z
1[
b00001000 \
b1101111010101101101111101110111111011110101011011011111011101111 _
1b
1d
#24
0b
0d
#25
1b
1d
#26
0b
0d
#27
b00001100 \
b00000000000000000000000000000010 ]
1b
1d
#28
0b
0d
#29
b00000000000000000000000000000010 3
b00011000 \
b10010110000111100001110011000000 ]
1b
1d
#30
0b
0d
#31
b0000000000000000000000000000000010010110000111100001110011000000 6
b10010110000111100001110011000000 >
b00011100 \
b00000000000000000111111110001010 ]
1b
1d
#32
0b
0d
#33
b0000000000000000011111111000101010010110000111100001110011000000 6
b00000000000000000111111110001010 ?
b0000000000000000000000000000000010010110000111100001110011000000 T
b00100000 \
b10010110000111100001110101000000 ]
1b
1d
#34
0b
0d
#35
b0000000000000000000000000000000010010110000111100001110101000000 8
b10010110000111100001110101000000 @
b0000000000000000011111111000101010010110000111100001110011000000 T
b00100100 \
b00000000000000000111111110001010 ]
1b
1d
#36
0b
0d
#37
b0000000000000000011111111000101010010110000111100001110101000000 8
b00000000000000000111111110001010 A
b0000000000000000000000000000000010010110000111100001110101000000 V
b00101000 \
b10010110000111100001110110000000 ]
1b
1d
#38
0b
0d
#39
b0000000000000000000000000000000010010110000111100001110110000000 :
b10010110000111100001110110000000 B
b0000000000000000011111111000101010010110000111100001110101000000 V
b00101100 \
b00000000000000000111111110001010 ]
1b
1d
#40
0b
0d
#41
b0000000000000000000000000000000010010110000111100001110110000000 (
b0000000000000000011111111000101010010110000111100001110110000000 :
b00000000000000000111111110001010 C
b0000000000000000000000000000000010010110000111100001110110000000 X
b00000000 \
b00000000000000000000000000000001 ]
1b
1d
#42
0b
0d
#43
b0000000000000000011111111000101010010110000111100001110110000000 (
1.
b00000000000000000000000000000001 <
b0000000000000000011111111000101010010110000111100001110110000000 X
b00000000000000000000000000000000 ]
1b
1d
#44
0b
0d
#45
1&
b0000000000000000011111111000101010010110000111100001110011000000 (
0.
b00000000000000000000000000000000 <
b001 N
b00010000 \
b00000000000000000000000000000001 ]
1b
1d
#46
0b
0d
#47
0&
b0000000000000000011111111000101010010110000111100001110110000000 (
1-
b00000000000000000000000000000001 1
b00000000000000000000000000000001 4
1J
b010 N
b00000000000000000000000000000000 ]
1b
1d
#48
0b
0d
#49
b00000000000000000000000000000010 1
b00000000000000000000000000000000 4
0J
b00010100 \
b00000000000000000000000000000001 ]
1^
b0000000000000000000000000000000000000000000000000001000001010001 _
1b
1d
#50
0b
0d
#51
1&
b0000000000000000011111111000101010010110000111100001110101000000 (
0-
b00000000000000000000000000000011 1
b00000000000000000000000000000001 5
1D
b110010011111100011000010111011001101111011000001010010100011001 F
b011 N
b0000000000000000000000000000000000000000000000000000000001010001 O
b00000000000000000000000000000000 ]
0^
b1101111010101101101111101110111111011110101011011011111011101111 _
1b
1d
#52
0b
0d
#53
0&
b0000000000000000011111111000101010010110000111100001110110000000 (
1-
b00000000000000000000000000000100 1
b00000000000000000000000000000000 5
0D
b100 N
0[
b00000000 \
1b
1d
#54
0b
0d
#55
0#
1$
b00000000000000000000000000000101 1
0Z
1[
b10101101 \
b00000000000000000000101110101101 ]
1^
b0000000000000000000000000000000000000000000000000011010101010011 _
1b
1d
#56
0b
0d
#57
0$
1&
1'
0-
b00000000000000000000000000000110 1
b000000000000000000000000000000000000000000000000001101001000011 F
b101 N
b0000000000000000000000000000000000000000000000000000000001010011 Q
0^
b1101111010101101101111101110111111011110101011011011111011101111 _
1b
1d
#58
0b
0d
#59
0&
0'
1*
b00000000000000000000000000000111 1
1E
b0000000000000000000000000000000000000000000000000001101001000011 H
b000000000000000000000000000000000000000000000000001101001000011 L
b110 N
1b
1d
#60
0b
0d
#61
1#
1&
b0000000000000000011111111000101010010110000111100001110011000001 (
0*
b00000000000000000000000000001000 1
b001 N
b00000000000000000000000000000001 S
b0000000000000000011111111000101010010110000111100001110011000001 T
b0000000000000000011111111000101010010110000111100001110101000001 V
1Z
0[
b00000000 \
b00000000000000000000000000000000 ]
1b
1d
#62
0b
0d
#63
0#
1$
0&
b0000000000000000011111111000101010010110000111100001110110000000 (
1-
b00000000000000000000000000001001 1
b010 N
1b
1d
#64
0b
0d
#65
0$
b00000000000000000000000000001010 1
0Z
1[
b10101101 \
b00000000000000000000101110101101 ]
1^
b0000000000000000000000000000000000000000000000000000000000010000 _
1b
1d
#66
0b
0d
#67
1&
b0000000000000000011111111000101010010110000111100001110101000001 (
0-
b00000000000000000000000000001011 1
b000000000000000000000000000000000000000000000000000010100110000 F
b011 N
b0000000000000000000000000000000000000000000000000000000000010000 O
0^
b1101111010101101101111101110111111011110101011011011111011101111 _
1b
1d
#68
0b
0d
#69
0&
b0000000000000000011111111000101010010110000111100001110110000000 (
1-
b00000000000000000000000000001100 1
b100 N
1b
1d
#70
0b
0d
#71
b00000000000000000000000000001101 1
1^
b0000000000000000000000000000000000000000000000000000000000110101 _
1b
1d
#72
0b
0d
#73
1&
1'
0-
b00000000000000000000000000001110 1
b000000000000000000000000000000000000000000000000000001101010000 F
b101 N
b0000000000000000000000000000000000000000000000000000000000110101 Q
0^
b1101111010101101101111101110111111011110101011011011111011101111 _
1b
1d
#74
0b
0d
#75
1#
0&
0'
1*
10
b00000000000000000000000000001111 1
b0000000000000000000000000000000000000000000000000001110110010011 H
1K
b000000000000000000000000000000000000000000000000001110110010011 L
b110 N
1Z
0[
b00000000 \
b00000000000000000000000000000000 ]
1b
1d
#76
0b
0d
#77
0#
1$
0*
b0000000000000000000000000000000000000000000000000001110110010011 +
1/
00
b00000000000000000000000000010000 1
b00000000000000000000000000001111 =
0K
b000 N
b00000000000000000000000000000010 S
b0000000000000000011111111000101010010110000111100001110011000010 T
b0000000000000000011111111000101010010110000111100001110101000010 V
1b
1d
#78
0b
0d
#79
0$
b00000000000000000000000000000000 1
b00000000000000000000000000000010 <
b00000000000000000000000000000000 S
b0000000000000000011111111000101010010110000111100001110011000000 T
b0000000000000000011111111000101010010110000111100001110101000000 V
0Z
1[
b10101101 \
b00000000000000000000101110101101 ]
1b
1d
#80
0b
0d
#81
1b
1d
#82
0b
0d
#83
1b
1d
#84
0b
0d
#85
1b
1d
#86
0b
0d
#87
1b
1d
#88
0b
0d
#89
1b
1d
#90
0b
0d
#91
1b
1d
#92
0b
0d
#93
1b
1d
#94
0b
0d
#95
1#
1Z
0[
b00000000 \
b00000000000000000000000000000000 ]
1b
1d
#96
0b
0d
#97
0#
1$
b00000000000000000000000000000010 %
1b
1d
#98
0b
0d
#99
0$
0Z
1[
b10101101 \
b00000000000000000000101110101101 ]
1b
1d
#100
0b
0d
#101
1b
1d
#102
0b
0d
#103
1b
1d
#104
0b
0d
#105
1b
1d
#106
0b
0d
#107
1b
1d
#108
0b
0d
#109
1#
1Z
0[
b00000100 \
b00000000000000000000000000000000 ]
1b
1d
#110
0b
0d
#111
0#
1$
b00000000000000000000000000001111 %
1b
1d
#112
0b
0d
#113
0$
0Z
1[
b10101101 \
b00000000000000000000101110101101 ]
1b
1d
#114
0b
0d
#115
1b
1d
#116
0b
0d
#117
1b
1d
#118
0b
0d
#119
1b
1d
#120
0b
0d
#121
1b
1d
#122
0b
0d
#123
1b
1d
#124
0b
0d
#125
1b
1d
#126
0b
0d
#127
1b
1d
#128
0b
0d
#129
1b
1d
#130
0b
0d
#131
1b
1d
#132
0b
0d
#133
1b
1d
#134
0b
0d
#135
1b
1d
#136
0b
0d
#137
1b
1d
#138
0b
0d
#139
1b
1d
#140
0b
0d
#141
1b
1d
#142
0b
0d
#143
1b
1d
#144
0b
0d
#145
1b
1d
#146
0b
0d
#147
1b
1d
#148
0b
0d
#149
1b
1d
#150
0b
0d
#151
1b
1d
#152
0b
0d
#153
1b
1d
#154
0b
0d
#155
1b
1d
#156
0b
0d
#157
1b
1d
#158
0b
0d
#159
1b
1d
#160
0b
0d
#161
1b
1d
#162
0b
0d
#163
1b
1d
#164
0b
0d
#165
1b
1d
#166
0b
0d
#167
1b
1d
#168
0b
0d
#169
1b
1d
#170
0b
0d
#171
1b
1d
#172
0b
0d
#173
1b
1d
#174
0b
0d
#175
1b
1d
#176
0b
0d
#177
1b
1d
#178
0b
0d
#179
1b
1d
#180
0b
0d
#181
1b
1d
#182
0b
0d
#183
1b
1d
#184
0b
0d
#185
1b
1d
#186
0b
0d
#187
1a
1b
1d
1e
#188
0a
0b
0d
0e
#189
1b
1d
