$version Generated by VerilatedVcd $end
$date Fri Jul 12 11:44:00 2019
 $end
$timescale   1ns $end

 $scope module TOP $end
  $var wire  1 a clock $end
  $var wire  1 b reset $end
  $var wire  1 c sim_clock $end
  $var wire  1 d sim_wait $end
  $scope module TestAccel $end
   $var wire  1 a clock $end
   $var wire  1 b reset $end
   $var wire  1 c sim_clock $end
   $var wire  1 a sim_shell_clock $end
   $var wire  8 [ sim_shell_host_req_addr [7:0] $end
   $var wire  1 # sim_shell_host_req_deq $end
   $var wire  1 Z sim_shell_host_req_opcode $end
   $var wire  1 Y sim_shell_host_req_valid $end
   $var wire 32 \ sim_shell_host_req_value [31:0] $end
   $var wire 32 % sim_shell_host_resp_bits [31:0] $end
   $var wire  1 $ sim_shell_host_resp_valid $end
   $var wire 64 ^ sim_shell_mem_rd_bits [63:0] $end
   $var wire  1 - sim_shell_mem_rd_ready $end
   $var wire  1 ] sim_shell_mem_rd_valid $end
   $var wire 64 ( sim_shell_mem_req_addr [63:0] $end
   $var wire  1 ' sim_shell_mem_req_opcode $end
   $var wire  1 & sim_shell_mem_req_valid $end
   $var wire 64 + sim_shell_mem_wr_bits [63:0] $end
   $var wire  1 * sim_shell_mem_wr_valid $end
   $var wire  1 b sim_shell_reset $end
   $var wire  1 c sim_shell_sim_clock $end
   $var wire  1 ` sim_shell_sim_wait $end
   $var wire  1 d sim_wait $end
   $var wire  1 a vta_accel_clock $end
   $var wire  8 [ vta_accel_io_host_req_addr [7:0] $end
   $var wire  1 # vta_accel_io_host_req_deq $end
   $var wire  1 Z vta_accel_io_host_req_opcode $end
   $var wire  1 Y vta_accel_io_host_req_valid $end
   $var wire 32 \ vta_accel_io_host_req_value [31:0] $end
   $var wire 32 % vta_accel_io_host_resp_bits [31:0] $end
   $var wire  1 $ vta_accel_io_host_resp_valid $end
   $var wire 64 ^ vta_accel_io_mem_rd_bits [63:0] $end
   $var wire  1 - vta_accel_io_mem_rd_ready $end
   $var wire  1 ] vta_accel_io_mem_rd_valid $end
   $var wire 64 ( vta_accel_io_mem_req_addr [63:0] $end
   $var wire  1 ' vta_accel_io_mem_req_opcode $end
   $var wire  1 & vta_accel_io_mem_req_valid $end
   $var wire 64 + vta_accel_io_mem_wr_bits [63:0] $end
   $var wire  1 * vta_accel_io_mem_wr_valid $end
   $var wire  1 b vta_accel_reset $end
   $scope module sim_shell $end
    $var wire  1 a clock $end
    $var wire  8 [ host_req_addr [7:0] $end
    $var wire  1 # host_req_deq $end
    $var wire  1 Z host_req_opcode $end
    $var wire  1 Y host_req_valid $end
    $var wire 32 \ host_req_value [31:0] $end
    $var wire 32 % host_resp_bits [31:0] $end
    $var wire  1 $ host_resp_valid $end
    $var wire 64 ^ mem_rd_bits [63:0] $end
    $var wire  1 - mem_rd_ready $end
    $var wire  1 ] mem_rd_valid $end
    $var wire 64 ( mem_req_addr [63:0] $end
    $var wire  1 ' mem_req_opcode $end
    $var wire  1 & mem_req_valid $end
    $var wire 64 + mem_wr_bits [63:0] $end
    $var wire  1 * mem_wr_valid $end
    $var wire  1 a mod_host_clock $end
    $var wire  8 [ mod_host_dpi_req_addr [7:0] $end
    $var wire  1 # mod_host_dpi_req_deq $end
    $var wire  1 Z mod_host_dpi_req_opcode $end
    $var wire  1 Y mod_host_dpi_req_valid $end
    $var wire 32 \ mod_host_dpi_req_value [31:0] $end
    $var wire 32 % mod_host_dpi_resp_bits [31:0] $end
    $var wire  1 $ mod_host_dpi_resp_valid $end
    $var wire  1 b mod_host_reset $end
    $var wire  1 a mod_mem_clock $end
    $var wire 64 ^ mod_mem_dpi_rd_bits [63:0] $end
    $var wire  1 - mod_mem_dpi_rd_ready $end
    $var wire  1 ] mod_mem_dpi_rd_valid $end
    $var wire 64 ( mod_mem_dpi_req_addr [63:0] $end
    $var wire  8 e mod_mem_dpi_req_len [7:0] $end
    $var wire  1 ' mod_mem_dpi_req_opcode $end
    $var wire  1 & mod_mem_dpi_req_valid $end
    $var wire 64 + mod_mem_dpi_wr_bits [63:0] $end
    $var wire  1 * mod_mem_dpi_wr_valid $end
    $var wire  1 b mod_mem_reset $end
    $var wire  1 c mod_sim_clock $end
    $var wire  1 ` mod_sim_dpi_wait $end
    $var wire  1 b mod_sim_reset $end
    $var wire  1 b reset $end
    $var wire  1 c sim_clock $end
    $var wire  1 ` sim_wait $end
    $scope module mod_host $end
     $var wire 32 f ADDR_BITS [31:0] $end
     $var wire 32 g DATA_BITS [31:0] $end
     $var wire  1 a clock $end
     $var wire  8 [ dpi_req_addr [7:0] $end
     $var wire  1 # dpi_req_deq $end
     $var wire  1 Z dpi_req_opcode $end
     $var wire  1 Y dpi_req_valid $end
     $var wire 32 \ dpi_req_value [31:0] $end
     $var wire 32 % dpi_resp_bits [31:0] $end
     $var wire  1 $ dpi_resp_valid $end
     $var wire  1 b reset $end
    $upscope $end
    $scope module mod_mem $end
     $var wire 32 h ADDR_BITS [31:0] $end
     $var wire 32 h DATA_BITS [31:0] $end
     $var wire 32 f LEN_BITS [31:0] $end
     $var wire  1 a clock $end
     $var wire 64 ^ dpi_rd_bits [63:0] $end
     $var wire  1 - dpi_rd_ready $end
     $var wire  1 ] dpi_rd_valid $end
     $var wire 64 ( dpi_req_addr [63:0] $end
     $var wire  8 e dpi_req_len [7:0] $end
     $var wire  1 ' dpi_req_opcode $end
     $var wire  1 & dpi_req_valid $end
     $var wire 64 + dpi_wr_bits [63:0] $end
     $var wire  1 * dpi_wr_valid $end
     $var wire  1 b reset $end
    $upscope $end
    $scope module mod_sim $end
     $var wire  1 c clock $end
     $var wire  1 ` dpi_wait $end
     $var wire  1 b reset $end
     $var wire  1 ` wait_reg $end
    $upscope $end
   $upscope $end
   $scope module vta_accel $end
    $var wire  1 a ce_clock $end
    $var wire 32 1 ce_io_ecnt_0_bits [31:0] $end
    $var wire  1 0 ce_io_ecnt_0_valid $end
    $var wire  1 / ce_io_finish $end
    $var wire  1 . ce_io_launch $end
    $var wire 64 ^ ce_io_mem_rd_bits [63:0] $end
    $var wire  1 - ce_io_mem_rd_ready $end
    $var wire  1 ] ce_io_mem_rd_valid $end
    $var wire 64 ( ce_io_mem_req_addr [63:0] $end
    $var wire  1 ' ce_io_mem_req_opcode $end
    $var wire  1 & ce_io_mem_req_valid $end
    $var wire 64 + ce_io_mem_wr_bits [63:0] $end
    $var wire  1 * ce_io_mem_wr_valid $end
    $var wire 64 6 ce_io_ptrs_0 [63:0] $end
    $var wire 64 8 ce_io_ptrs_1 [63:0] $end
    $var wire 64 : ce_io_ptrs_2 [63:0] $end
    $var wire 32 2 ce_io_vals_0 [31:0] $end
    $var wire 32 3 ce_io_vals_1 [31:0] $end
    $var wire 32 4 ce_io_vals_2 [31:0] $end
    $var wire 32 5 ce_io_vals_3 [31:0] $end
    $var wire  1 b ce_reset $end
    $var wire  1 a clock $end
    $var wire  8 [ io_host_req_addr [7:0] $end
    $var wire  1 # io_host_req_deq $end
    $var wire  1 Z io_host_req_opcode $end
    $var wire  1 Y io_host_req_valid $end
    $var wire 32 \ io_host_req_value [31:0] $end
    $var wire 32 % io_host_resp_bits [31:0] $end
    $var wire  1 $ io_host_resp_valid $end
    $var wire 64 ^ io_mem_rd_bits [63:0] $end
    $var wire  1 - io_mem_rd_ready $end
    $var wire  1 ] io_mem_rd_valid $end
    $var wire 64 ( io_mem_req_addr [63:0] $end
    $var wire  1 ' io_mem_req_opcode $end
    $var wire  1 & io_mem_req_valid $end
    $var wire 64 + io_mem_wr_bits [63:0] $end
    $var wire  1 * io_mem_wr_valid $end
    $var wire  1 b reset $end
    $var wire  1 a rf_clock $end
    $var wire 32 1 rf_io_ecnt_0_bits [31:0] $end
    $var wire  1 0 rf_io_ecnt_0_valid $end
    $var wire  1 / rf_io_finish $end
    $var wire  8 [ rf_io_host_req_addr [7:0] $end
    $var wire  1 # rf_io_host_req_deq $end
    $var wire  1 Z rf_io_host_req_opcode $end
    $var wire  1 Y rf_io_host_req_valid $end
    $var wire 32 \ rf_io_host_req_value [31:0] $end
    $var wire 32 % rf_io_host_resp_bits [31:0] $end
    $var wire  1 $ rf_io_host_resp_valid $end
    $var wire  1 . rf_io_launch $end
    $var wire 64 6 rf_io_ptrs_0 [63:0] $end
    $var wire 64 8 rf_io_ptrs_1 [63:0] $end
    $var wire 64 : rf_io_ptrs_2 [63:0] $end
    $var wire 32 2 rf_io_vals_0 [31:0] $end
    $var wire 32 3 rf_io_vals_1 [31:0] $end
    $var wire 32 4 rf_io_vals_2 [31:0] $end
    $var wire 32 5 rf_io_vals_3 [31:0] $end
    $var wire  1 b rf_reset $end
    $scope module ce $end
     $var wire  1 a clock $end
     $var wire 32 R cnt [31:0] $end
     $var wire 32 1 cycles [31:0] $end
     $var wire 32 j initvar [31:0] $end
     $var wire 32 1 io_ecnt_0_bits [31:0] $end
     $var wire  1 0 io_ecnt_0_valid $end
     $var wire  1 / io_finish $end
     $var wire  1 . io_launch $end
     $var wire 64 ^ io_mem_rd_bits [63:0] $end
     $var wire  1 - io_mem_rd_ready $end
     $var wire  1 ] io_mem_rd_valid $end
     $var wire 64 ( io_mem_req_addr [63:0] $end
     $var wire  1 ' io_mem_req_opcode $end
     $var wire  1 & io_mem_req_valid $end
     $var wire 64 + io_mem_wr_bits [63:0] $end
     $var wire  1 * io_mem_wr_valid $end
     $var wire 64 6 io_ptrs_0 [63:0] $end
     $var wire 64 8 io_ptrs_1 [63:0] $end
     $var wire 64 : io_ptrs_2 [63:0] $end
     $var wire 32 2 io_vals_0 [31:0] $end
     $var wire 32 3 io_vals_1 [31:0] $end
     $var wire 32 4 io_vals_2 [31:0] $end
     $var wire 32 5 io_vals_3 [31:0] $end
     $var wire  1 a overallAccum_clock $end
     $var wire 63 K overallAccum_io_in [62:0] $end
     $var wire  1 I overallAccum_io_rst $end
     $var wire 64 + overallAccum_io_sum [63:0] $end
     $var wire  1 J overallAccum_io_valid $end
     $var wire  1 b overallAccum_reset $end
     $var wire 64 S raddr1 [63:0] $end
     $var wire 64 U raddr2 [63:0] $end
     $var wire  1 / ready $end
     $var wire 64 N reg1 [63:0] $end
     $var wire 64 P reg2 [63:0] $end
     $var wire  1 b reset $end
     $var wire  1 a sliceAccum_clock $end
     $var wire 63 E sliceAccum_io_in [62:0] $end
     $var wire  1 D sliceAccum_io_rst $end
     $var wire 64 G sliceAccum_io_sum [63:0] $end
     $var wire  1 ' sliceAccum_io_valid $end
     $var wire  1 b sliceAccum_reset $end
     $var wire  3 M state [2:0] $end
     $var wire 64 W waddr [63:0] $end
     $scope module overallAccum $end
      $var wire  1 a clock $end
      $var wire 32 l initvar [31:0] $end
      $var wire 63 K io_in [62:0] $end
      $var wire  1 I io_rst $end
      $var wire 64 + io_sum [63:0] $end
      $var wire  1 J io_valid $end
      $var wire 64 + reg$ [63:0] $end
      $var wire  1 b reset $end
     $upscope $end
     $scope module sliceAccum $end
      $var wire  1 a clock $end
      $var wire 32 k initvar [31:0] $end
      $var wire 63 E io_in [62:0] $end
      $var wire  1 D io_rst $end
      $var wire 64 G io_sum [63:0] $end
      $var wire  1 ' io_valid $end
      $var wire 64 G reg$ [63:0] $end
      $var wire  1 b reset $end
     $upscope $end
    $upscope $end
    $scope module rf $end
     $var wire  1 a clock $end
     $var wire 32 i initvar [31:0] $end
     $var wire 32 1 io_ecnt_0_bits [31:0] $end
     $var wire  1 0 io_ecnt_0_valid $end
     $var wire  1 / io_finish $end
     $var wire  8 [ io_host_req_addr [7:0] $end
     $var wire  1 # io_host_req_deq $end
     $var wire  1 Z io_host_req_opcode $end
     $var wire  1 Y io_host_req_valid $end
     $var wire 32 \ io_host_req_value [31:0] $end
     $var wire 32 % io_host_resp_bits [31:0] $end
     $var wire  1 $ io_host_resp_valid $end
     $var wire  1 . io_launch $end
     $var wire 64 6 io_ptrs_0 [63:0] $end
     $var wire 64 8 io_ptrs_1 [63:0] $end
     $var wire 64 : io_ptrs_2 [63:0] $end
     $var wire 32 2 io_vals_0 [31:0] $end
     $var wire 32 3 io_vals_1 [31:0] $end
     $var wire 32 4 io_vals_2 [31:0] $end
     $var wire 32 5 io_vals_3 [31:0] $end
     $var wire 32 % rdata [31:0] $end
     $var wire 32 < reg_0 [31:0] $end
     $var wire 32 = reg_1 [31:0] $end
     $var wire 32 B reg_10 [31:0] $end
     $var wire 32 C reg_11 [31:0] $end
     $var wire 32 2 reg_2 [31:0] $end
     $var wire 32 3 reg_3 [31:0] $end
     $var wire 32 4 reg_4 [31:0] $end
     $var wire 32 5 reg_5 [31:0] $end
     $var wire 32 > reg_6 [31:0] $end
     $var wire 32 ? reg_7 [31:0] $end
     $var wire 32 @ reg_8 [31:0] $end
     $var wire 32 A reg_9 [31:0] $end
     $var wire  1 b reset $end
     $var wire  1 $ state $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b11100001100001111010001110111111 %
0&
0'
b1011110000000001011100111101010000011101111000101101010100001010 (
0*
b1111101111010100000111010100010011111111100001100111011011010111 +
0-
0.
1/
00
b11110010111010011100010010101000 1
b00110010001111000000000100110100 2
b00000111101100100010111001001001 3
b11000001110011010010110101011101 4
b01111110011010000111101010101100 5
b1110100000111011100100011100000001100000101000000111101110011100 6
b1011011110010101001011011100011100000011001110101111000011000001 8
b0011101110000010101001000010011101111100001000111111111011110011 :
b10000100101000110000000010001110 <
b01101101101100111000100101001110 =
b01100000101000000111101110011100 >
b11101000001110111001000111000000 ?
b00000011001110101111000011000001 @
b10110111100101010010110111000111 A
b01111100001000111111111011110011 B
b00111011100000101010010000100111 C
0D
b101111110010101000100001010111001011101010001001000111110011100 E
b1010111111011000110110001110001110010011011011111110001101110010 G
1I
0J
b011011100100000000000000000000000000000000000000000000000000000 K
b111 M
b1010011001011001101000100110101001100110000111101000111001001001 N
b1110100101111000011111110000101110010001111110111000001010111100 P
b10111011000110001100000010011000 R
b0011010101111011001110011010111010100001111000001110100000100010 S
b1100110111000001101011001101111101000000110101101010000010000001 U
b1011110000000001011100111101010000011101111000101101010100001010 W
0Y
0Z
b00000000 [
b00000000000000000000000000000000 \
0]
b0000000000000000000000000000000000000000000000000000000000000000 ^
0`
0a
1b
0c
0d
b00000000 e
b00000000000000000000000000001000 f
b00000000000000000000000000100000 g
b00000000000000000000000001000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
#1
b00000000000000000000000000000000 %
b0000000000000000000000000000000000000000000000000000000000000000 +
0/
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b0000000000000000000000000000000000000000000000000000000000000000 6
b0000000000000000000000000000000000000000000000000000000000000000 8
b0000000000000000000000000000000000000000000000000000000000000000 :
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b0000000000000000000000000000000000000000000000000000000000000000 G
0I
b000000000000000000000000000000000000000000000000000000000000000 K
b000 M
1a
#2
0a
#3
b0000000000000000000000000000000000000000000000000000000000000000 (
b00000000000000000000000000000000 R
b0000000000000000000000000000000000000000000000000000000000000000 S
b0000000000000000000000000000000000000000000000000000000000000000 U
b0000000000000000000000000000000000000000000000000000000000000000 W
1a
#4
0a
#5
1a
#6
0a
#7
1a
#8
0a
#9
1a
#10
0a
#11
1a
#12
0a
#13
1a
#14
0a
#15
1a
#16
0a
#17
1a
#18
0a
#19
1a
#20
0a
0b
#21
1`
1a
1c
1d
#22
0`
0a
0c
0d
#23
1#
1Y
1Z
b00001000 [
b1101111010101101101111101110111111011110101011011011111011101111 ^
1a
1c
#24
0a
0c
#25
1a
1c
#26
0a
0c
#27
b00001100 [
b00000000000000000000000000000010 \
1a
1c
#28
0a
0c
#29
b00000000000000000000000000000010 3
b00011000 [
b01100100001111101111000111000000 \
1a
1c
#30
0a
0c
#31
b0000000000000000000000000000000001100100001111101111000111000000 6
b01100100001111101111000111000000 >
b00011100 [
b00000000000000000111111110100001 \
1a
1c
#32
0a
0c
#33
b0000000000000000011111111010000101100100001111101111000111000000 6
b00000000000000000111111110100001 ?
b0000000000000000000000000000000001100100001111101111000111000000 S
b00100000 [
b01100100001111101111001001000000 \
1a
1c
#34
0a
0c
#35
b0000000000000000000000000000000001100100001111101111001001000000 8
b01100100001111101111001001000000 @
b0000000000000000011111111010000101100100001111101111000111000000 S
b00100100 [
b00000000000000000111111110100001 \
1a
1c
#36
0a
0c
#37
b0000000000000000011111111010000101100100001111101111001001000000 8
b00000000000000000111111110100001 A
b0000000000000000000000000000000001100100001111101111001001000000 U
b00101000 [
b01100100001111101111001011000000 \
1a
1c
#38
0a
0c
#39
b0000000000000000000000000000000001100100001111101111001011000000 :
b01100100001111101111001011000000 B
b0000000000000000011111111010000101100100001111101111001001000000 U
b00101100 [
b00000000000000000111111110100001 \
1a
1c
#40
0a
0c
#41
b0000000000000000000000000000000001100100001111101111001011000000 (
b0000000000000000011111111010000101100100001111101111001011000000 :
b00000000000000000111111110100001 C
b0000000000000000000000000000000001100100001111101111001011000000 W
b00000000 [
b00000000000000000000000000000001 \
1a
1c
#42
0a
0c
#43
b0000000000000000011111111010000101100100001111101111001011000000 (
1.
b00000000000000000000000000000001 <
b0000000000000000011111111010000101100100001111101111001011000000 W
b00000000000000000000000000000000 \
1a
1c
#44
0a
0c
#45
1&
b0000000000000000011111111010000101100100001111101111000111000000 (
0.
b00000000000000000000000000000000 <
b001 M
b00010000 [
b00000000000000000000000000000001 \
1a
1c
#46
0a
0c
#47
0&
b0000000000000000011111111010000101100100001111101111001011000000 (
1-
b00000000000000000000000000000001 1
b00000000000000000000000000000001 4
1I
b010 M
b00000000000000000000000000000000 \
1a
1c
#48
0a
0c
#49
b00000000000000000000000000000010 1
b00000000000000000000000000000000 4
0I
b00010100 [
b00000000000000000000000000000001 \
1]
b0000000000000000011111111010000101100100001111100001000001010001 ^
1a
1c
#50
0a
0c
#51
1&
b0000000000000000011111111010000101100100001111101111001001000000 (
0-
b00000000000000000000000000000011 1
b00000000000000000000000000000001 5
1D
b101111100100000001100101010100100110000100101000101110101111100 E
b011 M
b0000000000000000000000000000000000000000000000000000000001010001 N
b00000000000000000000000000000000 \
0]
b1101111010101101101111101110111111011110101011011011111011101111 ^
1a
1c
#52
0a
0c
#53
0&
b0000000000000000011111111010000101100100001111101111001011000000 (
1-
b00000000000000000000000000000100 1
b00000000000000000000000000000000 5
0D
b100 M
0Z
b00000000 [
1a
1c
#54
0a
0c
#55
0#
1$
b00000000000000000000000000000101 1
0Y
1Z
b10101101 [
b00000000000000000000101110101101 \
1]
b0000000000000000011111111010000101100100001111100011010101010011 ^
1a
1c
#56
0a
0c
#57
0$
1&
1'
0-
b00000000000000000000000000000110 1
b000000000000000000000000000000000000000000000000001101001000011 E
b101 M
b0000000000000000000000000000000000000000000000000000000001010011 P
0]
b1101111010101101101111101110111111011110101011011011111011101111 ^
1a
1c
#58
0a
0c
#59
0&
0'
1*
b00000000000000000000000000000111 1
b0000000000000000000000000000000000000000000000000001101001000011 G
b000000000000000000000000000000000000000000000000001101001000011 K
b110 M
1a
1c
#60
0a
0c
#61
1&
b0000000000000000011111111010000101100100001111101111000111000001 (
0*
b00000000000000000000000000001000 1
b001 M
b00000000000000000000000000000001 R
b0000000000000000011111111010000101100100001111101111000111000001 S
b0000000000000000011111111010000101100100001111101111001001000001 U
1a
1c
#62
0a
0c
#63
1#
0&
b0000000000000000011111111010000101100100001111101111001011000000 (
1-
b00000000000000000000000000001001 1
b010 M
1Y
0Z
b00000000 [
b00000000000000000000000000000000 \
1a
1c
#64
0a
0c
#65
0#
1$
b00000000000000000000000000001010 1
1]
b0000000100000000000000000111111110100001011001000011111000010000 ^
1a
1c
#66
0a
0c
#67
0$
1&
b0000000000000000011111111010000101100100001111101111001001000001 (
0-
b00000000000000000000000000001011 1
b000000000000000000000000000000000000000000000000000010100110000 E
b011 M
b0000000000000000000000000000000000000000000000000000000000010000 N
0Y
1Z
b10101101 [
b00000000000000000000101110101101 \
0]
b1101111010101101101111101110111111011110101011011011111011101111 ^
1a
1c
#68
0a
0c
#69
0&
b0000000000000000011111111010000101100100001111101111001011000000 (
1-
b00000000000000000000000000001100 1
b100 M
1a
1c
#70
0a
0c
#71
b00000000000000000000000000001101 1
1]
b0000000100000000000000000111111110100001011001000011111000110101 ^
1a
1c
#72
0a
0c
#73
1&
1'
0-
b00000000000000000000000000001110 1
b000000000000000000000000000000000000000000000000000001101010000 E
b101 M
b0000000000000000000000000000000000000000000000000000000000110101 P
0]
b1101111010101101101111101110111111011110101011011011111011101111 ^
1a
1c
#74
0a
0c
#75
1#
0&
0'
1*
10
b00000000000000000000000000001111 1
b0000000000000000000000000000000000000000000000000001110110010011 G
1J
b000000000000000000000000000000000000000000000000001110110010011 K
b110 M
1Y
0Z
b00000000 [
b00000000000000000000000000000000 \
1a
1c
#76
0a
0c
#77
0#
1$
0*
b0000000000000000000000000000000000000000000000000001110110010011 +
1/
00
b00000000000000000000000000010000 1
b00000000000000000000000000001111 =
0J
b000 M
b00000000000000000000000000000010 R
b0000000000000000011111111010000101100100001111101111000111000010 S
b0000000000000000011111111010000101100100001111101111001001000010 U
1a
1c
#78
0a
0c
#79
0$
0/
b00000000000000000000000000000000 1
b00000000000000000000000000000010 <
b00000000000000000000000000000000 R
b0000000000000000011111111010000101100100001111101111000111000000 S
b0000000000000000011111111010000101100100001111101111001001000000 U
0Y
1Z
b10101101 [
b00000000000000000000101110101101 \
1a
1c
#80
0a
0c
#81
1a
1c
#82
0a
0c
#83
1a
1c
#84
0a
0c
#85
1a
1c
#86
0a
0c
#87
1a
1c
#88
0a
0c
#89
1a
1c
#90
0a
0c
#91
1a
1c
#92
0a
0c
#93
1a
1c
#94
0a
0c
#95
1a
1c
#96
0a
0c
#97
1a
1c
#98
0a
0c
#99
1a
1c
#100
0a
0c
#101
1a
1c
#102
0a
0c
#103
1a
1c
#104
0a
0c
#105
1a
1c
#106
0a
0c
#107
1a
1c
#108
0a
0c
#109
1a
1c
#110
0a
0c
#111
1a
1c
#112
0a
0c
#113
1a
1c
#114
0a
0c
#115
1a
1c
#116
0a
0c
#117
1a
1c
#118
0a
0c
#119
1a
1c
#120
0a
0c
#121
1a
1c
#122
0a
0c
#123
1a
1c
#124
0a
0c
#125
1a
1c
#126
0a
0c
#127
1a
1c
#128
0a
0c
#129
1#
1Y
0Z
b00000000 [
b00000000000000000000000000000000 \
1a
1c
#130
0a
0c
#131
0#
1$
b00000000000000000000000000000010 %
1a
1c
#132
0a
0c
#133
0$
0Y
1Z
b10101101 [
b00000000000000000000101110101101 \
1a
1c
#134
0a
0c
#135
1a
1c
#136
0a
0c
#137
1a
1c
#138
0a
0c
#139
1a
1c
#140
0a
0c
#141
1a
1c
#142
0a
0c
#143
1#
1Y
0Z
b00000100 [
b00000000000000000000000000000000 \
1a
1c
#144
0a
0c
#145
0#
1$
b00000000000000000000000000001111 %
1a
1c
#146
0a
0c
#147
0$
0Y
1Z
b10101101 [
b00000000000000000000101110101101 \
1a
1c
#148
0a
0c
#149
1a
1c
#150
0a
0c
#151
1a
1c
#152
0a
0c
#153
1a
1c
#154
0a
0c
#155
1a
1c
#156
0a
0c
#157
1a
1c
#158
0a
0c
#159
1a
1c
#160
0a
0c
#161
1a
1c
#162
0a
0c
#163
1`
1a
1c
1d
#164
0`
0a
0c
0d
#165
1a
1c
